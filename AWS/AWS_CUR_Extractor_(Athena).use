
######################################################################
#
# This is a Template Extractor for AWS CUR using Athena. 
#
# This Extractor assumes that you have already configured Athena.
# If you have not done this already, please follow the instructions 
# in the following tutorial:
#
# - https://docs.exivity.com/getting-started/tutorials/amazon-aws-stack
#                                                               
# When executing this script, it assumes two arguments:
# - FROM and TO date in: yyyyMMdd format
#
# NOTE: FROM and TO date should not overlap more then 1 month.
#		In case it does overlap 1 month, it will reset the FROM
#		date to the last day of the FROM month. And the TO date
#		to the first day of the TO month. Support for overlapping
#		months will be included in a future release.
#																
######################################################################

# Set this to 1 to enable a debug trace output when the script is run
var DEBUG = "0"
# This is the text that appears to the left and right of debug headings 
var banner = "________"

######################################################################
# Customer specific values here (these can be encrypted if required) #
#                                                                    #
# The Athena End Point that holds the AWS CUR billing data
public var API_EndPoint = "https://your.athene.endpoint.com/v1/QueryAthena2"
# The Athena database name
public var DBName = "aws_billing_report_dbname"
# The table that holds your data
public var TableName = "my_cur_report"
# Provide the AWS S3 bucket where the Athena writes its results, so the Extractor can download it  
public var bucket = "s3://YourS3Bucket"
# The API key that the Extractor will use to access the bucket
public var API_Key = "YourAppKey"
#                                                                    #
# End customer specific values                                       #
######################################################################


# Check if we have two parameters (from and to date)
if (${ARGC} != 2)
{
	print "This requires 2 argument, the day to collect usage for, and the date following that day, both in yyyyMMdd format"
	terminate
} else {
	var today = ${ARG_1}
	var tomorrow = ${ARG_2}
}

# Validate the date formats
match date "^([0-9]{8})$" ${today}
if (${date.STATUS} != MATCH) {
	print Argument 1 error: ${today} is not in today format
	terminate with error
}

match date "^([0-9]{8})$" ${tomorrow}
if (${date.STATUS} != MATCH) {
	print Argument 2 error: ${tomorrow} is not in today format
	terminate with error
}

# Extract the day, month and year fields from the dates
match day "^[0-9]{6}([0-9]{2})" ${today}
if (${day.STATUS} != MATCH) {
	print Could not extract day from the supplied date (${today})
	terminate
} else {
	var day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${today}
if (${day.STATUS} != MATCH) {
	print Could not extract month from the supplied date (${today})
	terminate
} else {
	var month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${today}
if (${year.STATUS} != MATCH) {
	print Could not extract year from the supplied date (${today})
	terminate
} else {
	var year = ${year.RESULT}
}

match day "^[0-9]{6}([0-9]{2})" ${tomorrow}
if (${day.STATUS} != MATCH) {
	print Could not extract day from the supplied date (${tomorrow})
	terminate
} else {
	var tomorrow_day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${tomorrow}
if (${day.STATUS} != MATCH) {
	print Could not extract month from the supplied date (${tomorrow})
	terminate
} else {
	var tomorrow_month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${tomorrow}
if (${year.STATUS} != MATCH) {
	print Could not extract year from the supplied date (${tomorrow})
	terminate
} else {
	var tomorrow_year = ${year.RESULT}
}

# Set some variables to facilitate running for 
# multiple days within a single month.
var date_diff = ${tomorrow_day}
var date_diff -= ${day}
var next_day = ${day}

if (${month} != ${tomorrow_month}) {
  print "WARNING! spanning two months not available for > 1 day."
  print "Resetting day variable to last day of the FROM month ..."
  get_last_day_of ${year}${month} as day
  print "Resetting tomorrow_day variable to first day of the to month ..."
  var tomorrow_day = 01
  var date_diff = 1
}
# Encrypts the bucket variable in a URL friendly manner.
uri encode-component bucket

var date_diff += 1

loop date_range ${date_diff} {

# Creates the query with the day that the user has input.
var query = "SELECT bill_InvoiceId, bill_PayerAccountId, lineItem_UsageAccountId, lineItem_LineItemType, lineItem_UsageStartDate, lineItem_UsageEndDate, lineItem_UsageType, lineItem_Operation, lineItem_AvailabilityZone, lineItem_ResourceId, lineItem_UsageAmount, lineItem_NormalizedUsageAmount, lineItem_CurrencyCode, lineItem_BlendedRate, lineItem_BlendedCost, lineItem_LineItemDescription, product_ProductName, product_operatingSystem, product_usagetype, pricing_term, pricing_unit FROM ${DBName}.${TableName} where lineItem_UsageStartDate LIKE '${year}-${month}-${next_day}%';"
print ${query}
# Encrypts the query and the bucket variables in a URL friendly manner.
uri encode-component query
print "${API_EndPoint}?query=${query}&s3output=${bucket}"

#First API Call to obtain the Json with the url of the queried report.
print "${API_EndPoint}?query=${query}&s3output=${bucket}"
clear http_headers
set http_header "x-api-key: ${API_Key}"
buffer API = http GET "${API_EndPoint}?query=${query}&s3output=${bucket}"
#Downloads the report from the URL previously created and saves it locally.
set http_savefile "./extracted/AWS_CUR/${year}${month}${next_day}CUR.csv"
http GET $JSON{API}.[url]

print "This is date_range loop number: ${date_range.COUNT}"
  var next_day += 1
print ${next_day}
}