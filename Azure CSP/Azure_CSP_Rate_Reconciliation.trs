option loglevel = DEBUGX
# option embed = YES

var this_month = ${dataMonth}
var this_year = ${dataYear}
var nml = 1

var nml = @STRLEN (${this_month})
if (${nml} == 1) {
	var this_month = @CONCAT("0", ${this_month})
}

var bill_dir = "${this_year}${this_month}"

# Import monthly usage from Azure CSP
import "system/extracted/AzureCSP/${bill_dir}.*_csp_usage.csv" source azure alias consumption options {
    pattern enabled
}

# Import monthly usage from Azure CSP
import "system/extracted/AzureCSP/${bill_dir}.*_csp_usage_IUR.csv" source azure alias consumptionIUR options {
    pattern enabled
}

# Import Rates
# import "exported\Rates_CSP.csv" source azure alias stack_rates
import "system\extracted\AzureCSP\Invoice\${bill_dir}\csp_billingitems.csv" source azure alias stack_rates options {
    exclude detailLineItemId invoiceLineItemType sku mpnId tier2MpnId chargeStartDate chargeEndDate billingProvider
}

# Appending IUR consumption to normal consumption
append azure.consumptionIUR to azure.consumption

default dset azure.consumption

export azure.consumption as "AzureCSP_Invoice/before.csv"
# Aggregating quantity by CustomerID 
aggregate notime customer_id match subscription_id	match  resource_id	match resource_name	match quantity sum
delete column EXIVITY_AGGR_COUNT

# Normalising an creating correlation column
capitalize values in columns azure.consumption.resource_id azure.stack_rates.resourceGuid azure.consumption.subscription_id azure.stack_rates.subscriptionId
create mergedcolumn resource_id2 separator " " from azure.consumption.resource_id azure.consumption.subscription_id
export azure.consumption as "AzureCSP_Invoice/after.csv"
# Calculating aggregated rates (in case of services with tiering)
default dset azure.stack_rates
aggregate notime currency match chargeType	match  partnerId	match partnerName	match partnerBillableAccountId	match customerId	match domainName	match customerCompanyName	match invoiceNumber	match subscriptionId	match subscriptionName	match subscriptionDescription	match billingCycleType match orderId match serviceName	match serviceType	match resourceGuid match resourceName match region match consumedQuantity match unit match postTaxTotal  sum

# Correlating quantity from usage
create mergedcolumn resource_id2 separator " " from azure.stack_rates.resourceGuid azure.stack_rates.subscriptionId
correlate azure.consumption.quantity using resource_id2

# Calculating new rate based on the aggregated monthly quantity
calculate column rate as column postTaxTotal / column quantity
export azure.stack_rates as "AzureCSP_Invoice/rates/${bill_dir}/rates_Test.csv"
# Normalising and exporting new rate file
delete columns EXIVITY_AGGR_COUNT resource_id2
export azure.stack_rates as "AzureCSP_Invoice/rates/${bill_dir}/rates.csv"
