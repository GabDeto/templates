loglevel DEBUG
#################################################################
# This USE script will download Azure EA billing csv using 
# a temporary blob
#
# The difference with this version, is that is send a request
# to generate a consumption csv on a blob. Once this file
# is ready to be downloaded from the blob, the URL to downloaded
# is send back, so it can be downloaded. This process is more
# robust with large data sets and therefore recommended
#
#                                                               
# This needs 1 parameter: 
# - date in YYYYMMDD format
#
# --------------------------------------------------------------#
# NOTES:                                                        #
# - This script can be extended to include subscription details #
#                                                               #
#################################################################


if (${ARGC} < 1)
{
	print This requires 1 argument, the day to collect usage for in yyyyMMdd format
	terminate
} else {
	var today = ${ARG_1}
}

# Validate the date formats
match date "^([0-9]{8})$" ${today}
if (${date.STATUS} != MATCH) {
	print Argument 1 error: ${today} is not in today format
	terminate
}

#
# Set global configuration
#
public var EA_endpoint = "https://ea.azure.com" # end point of the Azure EA API
public var EA_enrollment = "<your-enrollment>" # The enrollment number of the EA subscription
public var EA_secret = "<your-secret>" # fill in your secret, and optionally use the "Encrypt variable" option

# this directory should exist
public var exportdir = "system/extracted/AzureEA"
var usage_export_file = "${exportdir}/blob_${today}_ea_usage.csv"

#
#=================  End Configuration ==================#


#=================  Date Formatting  ==================#

# Extract the day, month and year fields from the dates
match day "^[0-9]{6}([0-9]{2})" ${today}
if (${day.STATUS} != MATCH) {
	print Could not extract day from the supplied date (${today})
	terminate
} else {
	var day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${today}
if (${day.STATUS} != MATCH) {
	print Could not extract month from the supplied date (${today})
	terminate
} else {
	var month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${today}
if (${year.STATUS} != MATCH) {
	print Could not extract year from the supplied date (${today})
	terminate
} else {
	var year = ${year.RESULT}
}

#=================  End Date Formatting ==================#




print Sending request for usage data ... 

# Set up the HTTP request parameters
set http_header "Authorization: Bearer ${EA_secret}"
buffer usage = http post "https://consumption.azure.com/v2/enrollments/${EA_enrollment}/usagedetails/submit?startTime=${year}-${month}-${day}&endTime=${year}-${month}-${day}"
# save {usage} as ${usage_export_file}
# discard {usage}
json format {usage}
print {usage} 
var blob = $JSON{usage}.[reportUrl]
discard {usage}
print Checking if download is ready ...

loop slurp {
  print "Wait for 5 seconds ..."
  pause 5000   # Wait for 5 seconds ..
  buffer report = http get "${blob}"
  var status = $JSON{report}.[status]
  if (${status} > 2) {
      print "status is ${status}, so we can download or fail:"
      json format {report}
      print {report} 
      var blob_url = $JSON{report}.[blobPath]
      clear http_headers
      buffer blob_file = http get "${blob_url}"
      save {blob_file} as ${usage_export_file}
      discard {blob_file}
      exit_loop
  }
  print "Status is ${status}, blob is not ready yet ..."
  discard {report}
}
print Finished downloading csv from blob
discard {report}