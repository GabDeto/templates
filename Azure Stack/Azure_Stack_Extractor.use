#################################################################
# 
#  This USE script will download the following Azure Stack data:
#
#	- Subscriptions
#	- Usage Data    
#
#  Please consult https://docs.exivity.com/ for more info.
#
# ==========================================================
#                                                               
# This needs two parameters, FROM and TO date in: YYYYMMDD
#
# NOTE: FROM and TO date should not overlap more then 1 month.
#		In case it does overlap 1 month, it will reset the FROM
#		date to the last day of the FROM month. And the TO date
#		to the first day of the TO month. Support for overlapping
#		months will be included in a future release.
#																
#################################################################

# Check if we have two parameters (from and to date)
if (${ARGC} != 2)
{
     print This requires 2 argument, the day to collect usage for, and the date following that day, both in yyyyMMdd format
	terminate
} else {
	var today = ${ARG_1}
	var tomorrow = ${ARG_2}
}

# Validate the date formats
match date "^([0-9]{8})$" ${today}
if (${date.STATUS} != MATCH) {
	# print Argument 1 error: ${today} is not in today format
	terminate
}

match date "^([0-9]{8})$" ${tomorrow}
if (${date.STATUS} != MATCH) {
	# print Argument 2 error: ${tomorrow} is not in today format
	terminate
}

#==================== Configuration ====================#
#

# adjust log detail to: DEBUG, INFO, WARN 
loglevel DEBUGX

# Exivity Web App Client ID 
public var client_id = "<guid-for-application-id>" 
# Secret to authenticate
public var secret = "<secret-for-application>"

# your onmicrosoft.com domain
public var MyDomain = "MyDomain.onmicrosoft.com"
# The Default provider Subscription GUID
public var provider_sub = "<your-default-subscription-guid>" 

# replace with your adminmanagement hostname
public var management_hostname = "adminmanagement.my.domain.com"
# place your audience guid here
public var audience = "<your-audience-guid>" 
# can be changed, but daily is recommended
public var granularity = "daily" 

# Directory of extracted files. Relative to the %EXIVITY_HOME_PATH%
public var exportdir = "system/extracted/AzureStack"
var json_filedir = "${exportdir}/json"

# from here everything should be standard
var ARM_endpoint = "https://${management_hostname}"
var auth_endpoint = "https://login.windows.net"

#
#=================  End Configuration ==================#

#=================  Date Formatting  ==================#

# Extract the day, month and year fields from the dates
match day "^[0-9]{6}([0-9]{2})" ${today}
if (${day.STATUS} != MATCH) {
	# print Could not extract day from the supplied date (${today})
	terminate
} else {
	var day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${today}
if (${day.STATUS} != MATCH) {
	# print Could not extract month from the supplied date (${today})
	terminate
} else {
	var month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${today}
if (${year.STATUS} != MATCH) {
	# print Could not extract year from the supplied date (${today})
	terminate
} else {
	var year = ${year.RESULT}
}

match day "^[0-9]{6}([0-9]{2})" ${tomorrow}
if (${day.STATUS} != MATCH) {
	# print Could not extract day from the supplied date (${tomorrow})
	terminate
} else {
	var tomorrow_day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${tomorrow}
if (${day.STATUS} != MATCH) {
	# print Could not extract month from the supplied date (${tomorrow})
	terminate
} else {
	var tomorrow_month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${tomorrow}
if (${year.STATUS} != MATCH) {
	# print Could not extract year from the supplied date (${tomorrow})
	terminate
} else {
	var tomorrow_year = ${year.RESULT}
}

# Format of a start or end date argument to Azure Stack is: 2016-12-01T00:00:00%2b01:00 
var start_time = "${year}-${month}-${day}T00:00:00-00:00"
var end_time = "${tomorrow_year}-${tomorrow_month}-${tomorrow_day}T00:00:00-00:00"
#  print ${start_time}
#  print ${end_time}

#=================  End Date Formatting ==================#

clear http_headers
# Get an AD token from login.windows.net
# print "Getting AD Token"

#set http_header "Content-Type: application/x-www-form-urlencoded"
#set http_savefile "${json_filedir}/http_savefile.json"
#buffer token = http GET "https://adminmanagement.zne002.mediapro.cloud/metadata/endpoints?api-version=2015-01-01"
## print {token}


# Set up the HTTP request parameters
#set http_body data "grant_type=client_credentials&client_id=${client_id}&client_secret=${secret}&resource=https://adminmanagement.${MyDomain}"
set http_body data "grant_type=client_credentials&client_id=${client_id}&client_secret=${secret}&resource=https://adminmanagement.${MyDomain}/${audience}"
set http_header "Content-Type: application/x-www-form-urlencoded"
set http_savefile "${json_filedir}/http_savefile.json"
buffer token = http POST "${auth_endpoint}/${MyDomain}/oauth2/token"
if (${HTTP_STATUS_CODE} != 200) {
	 print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	 print The server response was:
	json format {token} 
	 print {token}
	terminate
}

# print "Succesfully authenticated!"

# Create a variable called ${access_token} from the AD token in {token}
var access_token = "$JSON{token}.[access_token]"
var refresh_token = "$JSON{token}.[refresh_token]"
## print "access token is ${access_token}"
## print "refresh token is ${refresh_token}"
discard {token}

# Set some variables to facilitate running for 
# multiple days within a single month.
var date_diff = ${tomorrow_day}
var date_diff -= ${day}
var next_day = ${day}

if (${month} != ${tomorrow_month}) {

  get_last_day_of ${year}${month} as lastday
  #var tomorrow_day = 01
  
  var date_diff = ${lastday}
  if (${lastday} == ${day}) { 
     var next_day = 00
  } else {
    var next_day = ${day}
  }
  var date_diff -= ${day}
  var date_diff += ${tomorrow_day}
  var tomorrow_month = ${month}
  var month_flag = "yes"
  if (${year} != ${tomorrow_year}) {
	var tomorrow_year = ${year}
	var year_flag = "yes"
  } else {
   var tomorrow_year = ${year}
   var year_flag = "no" 
  }
} else {
  var lastday = ${day}
  var month_flag = "no"
  var year_flag = "no" 
}

#print ${day} ${tomorrow_month} ${tomorrow_year} ${month_flag} ${year_flag} ${date_diff}

loop date_range ${date_diff} {

  if ( (${day} == ${lastday}) && ("${month_flag}" == "yes") && ("${tomorrow_month}" == "12")) {
  var next_day = 00
  var customer_export_file = "${exportdir}/${year}${month}${day}_stack_customers.csv"
  var subscriptions_export_file = "${exportdir}/${year}${month}${day}_stack_subscriptions.csv"
  var usage_export_file = "${exportdir}/${year}${month}${day}_stack_usage.csv"
  var tomorrow_month = 01
  var tomorrow_year += 1
#  print ${next_day} ${tomorrow_month} ${tomorrow_year} ${month_flag} ${year_flag} 12
  }

  if (( ${day} == ${lastday}) && ("${month_flag}" == "yes") && ("${tomorrow_month}" != "12")) {
  var next_day = 00
  var customer_export_file = "${exportdir}/${year}${month}${day}_stack_customers.csv"
  var subscriptions_export_file = "${exportdir}/${year}${month}${day}_stack_subscriptions.csv"
  var usage_export_file = "${exportdir}/${year}${month}${day}_stack_usage.csv"
  var tomorrow_month += 1
#  print ${next_day} ${tomorrow_month} ${tomorrow_year} ${month_flag} ${year_flag} not12
  }

  if ( (${day} > ${lastday}) && (${month_flag} == "yes")) {
  var next_day = 01
  var day = 01
  var month2 = ${tomorrow_month}
  var month = ${tomorrow_month}
#  print ${next_day} ${tomorrow_month} ${tomorrow_year} ${month_flag} ${year_flag}
  if (${year_flag} == "yes") {
  var year = ${tomorrow_year}
  }

  var customer_export_file = "${exportdir}/${year}${month2}${day}_stack_customers.csv"
  var subscriptions_export_file = "${exportdir}/${year}${month2}${day}_stack_subscriptions.csv"
  var usage_export_file = "${exportdir}/${year}${month2}${day}_stack_usage.csv"
  
  } else {
  var customer_export_file = "${exportdir}/${year}${month}${day}_stack_customers.csv"
  var subscriptions_export_file = "${exportdir}/${year}${month}${day}_stack_subscriptions.csv"
  var usage_export_file = "${exportdir}/${year}${month}${day}_stack_usage.csv"
  }

  # print "This is date_range loop number: ${date_range.COUNT}"
  var next_day += 1
  # Format of a start or end date argument to Azure CSP is: 2016-12-01T00:00:00%2b01:00 
  var start_time = ${year}-${month}-${day}T00:00:00-00:00
  var end_time = ${tomorrow_year}-${tomorrow_month}-${next_day}T00:00:00-00:00
#  print ${start_time}
#  print ${end_time}


  #============ GETTING AZURE STACK SUBSCRIPTION NAMES ==============#
  #
  
  clear http_headers
  set http_savefile "${json_filedir}/subs.json"
  set http_header "Accept: application/json"
  set http_header "Authorization: Bearer ${access_token}"
  
  csv "subscriptions" = ${subscriptions_export_file}
  csv add_headers "subscriptions" subscriptionId delegatedProviderSubscriptionId displayName 
  csv add_headers "subscriptions" owner tenantId routingResourceManagerType offerId state
  csv fix_headers "subscriptions"
  
  # do the request for consumption
  buffer subscriptions_buffer = http GET "${ARM_endpoint}/subscriptions/${provider_sub}/providers/Microsoft.Subscriptions.Admin/subscriptions?api-version=2015-11-01"
  ## print {subscriptions_buffer}
  foreach $JSON{subscriptions_buffer}.[value] as this_subscription {
    csv write_fields "subscriptions" $JSON(this_subscription).[subscriptionId]
    csv write_fields "subscriptions" $JSON(this_subscription).[delegatedProviderSubscriptionId]
    csv write_fields "subscriptions" $JSON(this_subscription).[displayName]
    csv write_fields "subscriptions" $JSON(this_subscription).[owner]
    csv write_fields "subscriptions" $JSON(this_subscription).[tenantId]
    csv write_fields "subscriptions" $JSON(this_subscription).[routingResourceManagerType]
    csv write_fields "subscriptions" $JSON(this_subscription).[offerId]
    csv write_fields "subscriptions" $JSON(this_subscription).[state]
  }
  
  #============= GETTING AZURE STACK USAGE RECORDS ==========# 
  #
  # print "Retrieving Azure usage data"
  
  csv "usage" = ${usage_export_file}
  csv add_headers "usage" id name type subscriptionId usageStartTime usageEndTime quantity meterId
  csv add_headers "usage" resourceUri location tags additionalInfo
  csv fix_headers "usage"
  
  # Assume there will be no continuation required
  var continuationToken = "none"
  
  # We'll loop here as there may be continuation required which will involve
  # additional HTTP requests for the usage for this customer
  var totalrecords = "0"
  loop usageloop {
  	# Query the usage for the customer_id and subscription_id
  	if (${usageloop.COUNT} == 1) {
  		# Initial request
  		# print Getting up to 1000 usage records ...
  		clear http_headers
  		set http_savefile "${json_filedir}\http_consumption_init-1k.json"
  		set http_header "Accept: application/json"
  		set http_header "Authorization: Bearer ${access_token}"
  
  		# print getting usage for start_time=${start_time}
  		# do the request for consumption
      buffer usage = http GET "${ARM_endpoint}/subscriptions/${provider_sub}/providers/Microsoft.Commerce/subscriberUsageAggregates?reportedStartTime=${start_time}&reportedEndTime=${end_time}&aggregationGranularity=${granularity}&api-version=2015-06-01-preview"
      
      if (${HTTP_STATUS_CODE} != 200) {
      	# print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
      	# print The server response was:
      	json format {usage} 
      	# print {usage}
      	terminate
      }
      # print Succesfully obtained usage
      json format {usage}
  		save {usage} as "${json_filedir}\${today}_usage_azure_stack_${provider_sub}.json"
  		# set pevious link to next link
  		var previous_link = $JSON{usage}.[nextLink]
  	} else {
  	  
  	  # first check if we got a new continuationToken
  	  # if its idential as the last call, we should be finished
  	  if ( ${continuation_uri} == ${previous_link} ) {
  	    # we're done so exit loop
  	    exit_loop
  	  } else {
  	    # we got a new link to call
  	    var previous_link = $JSON{usage}.[nextLink]
  	  }
  	  
  		# Need to use the continuation token
  		# print "Calling continuationToken ... "
  		clear http_headers
  		set http_header "Accept: application/json"
  		set http_header "Authorization: Bearer ${access_token}"
  		set http_header "MS-ContinuationToken: ${continuationToken}"
  		# print Calling: "${continuation_uri}"
  		buffer usage = http GET "${continuation_uri}"
  		json format {usage}
  		save {usage} as "${json_filedir}\${today}_usage_azure_stack${provider_sub}_${usageloop.COUNT}.json"
  	}
  	if (${HTTP_STATUS_CODE} != 200) {
  		# print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
  		# print failing to obtain use for customer ${customer_id} with subscription id ${subscription_id}
  	}
  
  	# Check the total count returned
  	var usagecount = 800
    
  	if (${usagecount} == 1000) {
  		# Extract the continuation token
  				var continuation_uri = $JSON{usage}.[nextLink]
  				# print Continuation URI is: ${continuation_uri}
  				exit_loop
  			}
  
  	# Render the usage as a CSV file
  	foreach $JSON{usage}.[value] as this_item {
  		csv write_fields "usage" $JSON(this_item).[id]
  		csv write_fields "usage" $JSON(this_item).[name]
  		csv write_fields "usage" $JSON(this_item).[type]
  		csv write_fields "usage" $JSON(this_item).[properties].[subscriptionId]
  		csv write_fields "usage" $JSON(this_item).[properties].[usageStartTime]
  		csv write_fields "usage" $JSON(this_item).[properties].[usageEndTime]
  		csv write_fields "usage" $JSON(this_item).[properties].[quantity]
  		csv write_fields "usage" $JSON(this_item).[properties].[meterId]
  		
  		# process the embedded json
  		buffer embed_buffer = data "$JSON(this_item).[properties].[instanceData]"
  		csv write_fields "usage" $JSON{embed_buffer}.[Microsoft.Resources].[resourceUri]
  		csv write_fields "usage" $JSON{embed_buffer}.[Microsoft.Resources].[location]
  		csv write_fields "usage" $JSON{embed_buffer}.[Microsoft.Resources].[tags]
  		csv write_fields "usage" $JSON{embed_buffer}.[Microsoft.Resources].[additionalInfo]
  		discard {embed_buffer}
  	}
  	
  	var continuation_uri = $JSON{usage}.[nextLink]
  	# print "continuation_uri is now: ${continuation_uri}"
  	if ( (${continuation_uri.LENGTH} > 17) && (${totalrecords} > 0) ) {
  		# print ${totalrecords} usage records received, getting up to 1000 more ...
  		var totalrecords += 1000
  	} else {
  		# print Approx. ${totalrecords} usage records received
  		# No more continuation required
  		exit_loop
  	}
  } # End If
  
  # close the csv files and delete the buffers
  csv close "usage"
  csv close "subscriptions"
  discard {usage}
  discard {subscriptions_buffer}
  
  # increase day with 1 in crease we are running for a date range
  var day += 1
  
} # end of loop