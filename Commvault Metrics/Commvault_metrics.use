#==================== Commvault METRICS API TEMPLATE  ====================#
#
#           This is a template Extractor for Commvault Metrics API
#
#==================== Commvault METRICS API TEMPLATE  ====================#
#
#=========================== Date Validation  ============================#
if (${ARGC} < 1)
{
	print This requires 1 argument, the day to collect usage for in yyyyMMdd format.
	terminate
} else {
	var dataDate = ${ARG_1}
}

# Validate the date formats
match date "^([0-9]{8})$" ${dataDate}
if (${date.STATUS} != MATCH) {
	print Argument 1 error: ${dataDate} is not in yyyyMMdd format
	terminate
} else {
  match YearMonth "^([0-9]{6})[0-9]{2}" ${dataDate}
  var FirstOfMonth = "${YearMonth.RESULT}01"
}
#=========================== Date Validation  ===========================#
#
#
#=========================== Public Variables  ==========================#

# user name to connect to Commvault Metrics server
public var username = "<metrics_user_account>"
# password should be base64 encoded
public var password = "<base64_encoded_password>"
# hostname of the metrics server
public var metrics_hostname = "your.server.com"
# folder where files should be extracted relative to %EXIVITY_HOME_PATH%
var JSON_dir = "system/extracted/metrics_api/json"
# folder where files should be extracted relative to %EXIVITY_HOME_PATH%
var CSV_dir = "system/extracted/metrics_api/csv"

# this should be default
var authentication_endpoint = "https://${metrics_hostname}/webconsole/api/login"
var authentication_payload = {\"username\":\"${username}\",\"password\":\"${password}\"}

#========================== Public Variables  ===========================#
#
#
#====================== Request Authention Token  =======================#
print -n Authenticating ...
set http_body data ${authentication_payload}
set http_savefile "${JSON_dir}/token.json"
set http_header "Host: ${metrics_hostname}"
set http_header "Accept: application/json"
set http_header "Content-type: application/json"
buffer token = http POST ${authentication_endpoint}
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {token} 
	print {token}
	terminate
}
clear http_headers
var access_token = "$JSON{token}.[token]"
discard {token}
print done

#==================== Request Authention Token  ====================#
#
#
#==================== Request Commcell Unique ID Report  ====================#
print -n Retrieving Commcell unique ID report ...
var request_endpoint_cuid = "https://${metrics_hostname}/CustomReportsEngine/rest/reportsplusengine/datasets/METRICS_DEFAULT/data?livefeed=true&offset=0&dateFormat=milliseconds&limit=-1&parameter.param2=0&parameter.param3=3&parameter.param1=-1&priority=high&operation=METRICS_EXECUTE_SP&nullValue=&parameter.spName=RptUpdateInfoSurvey&syscol=false"
set http_header "Content-Type: application/json"
set http_header "Accept: application/json"
set http_header "Authtoken: ${access_token}"
set http_savefile "${JSON_dir}/metrics_data.json"
buffer metrics_data_cuid = http GET "${request_endpoint_cuid}"
if (${HTTP_STATUS_CODE} != 200) {
	print Server response was ${HTTP_STATUS_CODE} (expected 200)
	print The server response was:
	json format {metrics_data_cuid} 
	print {metrics_data_cuid}
	print Exiting
	terminate
}
clear http_headers
print done

#==================== Request Commcell Unique ID Report  ====================#
#
#
#==================== Process Commcell Unique ID Report  ====================#
csv "cuid_details" = "${CSV_dir}/metrics_data_cuid.csv"

# Create a headed CSV with column names corresponding to those in the data
foreach $JSON{metrics_data_cuid}.[columns] as this_heading {
  csv add_headers "cuid_details" $JSON(this_heading).[name]
}
csv fix_headers "cuid_details"
foreach $JSON{metrics_data_cuid}.[records] as this_record {
  foreach $JSON(this_record).[] as this_value {
        csv write_field "cuid_details" ${this_value.VALUE}
    }
}
csv close "cuid_details"

#==================== Process Commcell Unique ID Report  ====================#

#==================== Process Usage by License Report  ====================#

# Create the CSV file with the correct headings using a single record as the template
foreach $JSON{metrics_data_cuid}.[records] as this_record {

  # Extract the first and second elements of the array within each record
  foreach $JSON(this_record).[] as this_record_element {
     var commcell_unique_id = ${this_record_element.VALUE}
     exit_loop
  }

  
  print -n Determining CSV column headings ...
  set http_header "Content-Type: application/json"
  set http_header "Accept: application/json"
  set http_header "Authtoken: ${access_token}"
  set http_savefile "${JSON_dir}/license_usage.json"
  buffer cuID_usage = http GET "https://${metrics_hostname}/CustomReportsEngine/rest/reportsplusengine/datasets/METRICS_DEFAULT/data?livefeed=true&offset=0&dateFormat=milliseconds&priority=normal&nullValue=&syscol=false&limit=-1&parameter.param2=3&parameter.param3=1&parameter.param1=-1&operation=METRICS_EXECUTE_SP&parameter.spName=RptAgentCapacityLicenseSurvey&parameter.param4=${commcell_unique_id}"
	if (${HTTP_STATUS_CODE} != 200) {
	print ${NEWLINE}Server response was ${HTTP_STATUS_CODE} (expected 200)
	print The server response was:
	json format {cuID_usage} 
	print {cuID_usage}
	print Exiting
	terminate
  }

  csv "ccid_usage" = "${CSV_dir}/ccid_usage.csv"
  csv add_header "ccid_usage" cuid # Not in the JSON?
  csv add_header "ccid_usage" commcell_ccid 

  # Create a headed CSV with column names corresponding to those in the data
  foreach $JSON{cuID_usage}.[columns] as this_heading {
    csv add_headers "ccid_usage" $JSON(this_heading).[name]
  }

  csv fix_headers "ccid_usage"
  clear http_headers
  print Done
  exit_loop
}

# ---
var commcell_commcell_id = UNKNOWN
foreach $JSON{metrics_data_cuid}.[records] as this_record {
  foreach $JSON(this_record).[] as this_record_element {
     if (${this_record_element.COUNT} == 1) {
	    print DEBUG: Extracted field 1: ${this_record_element.VALUE}
        var commcell_unique_id = ${this_record_element.VALUE}
		}
     if (${this_record_element.COUNT} == 2) {
		print DEBUG: Extracted field 2: ${this_record_element.VALUE}
        var commcell_commcell_id = ${this_record_element.VALUE}
        exit_loop
		}		
	 }

  print -n Obtaining usage details for cuID: ${commcell_unique_id} ...
  set http_header "Content-Type: application/json"
  set http_header "Accept: application/json"
  set http_header "Authtoken: ${access_token}"
  set http_savefile "${JSON_dir}/license_usage.json"
  buffer cuID_usage = http GET "https://${metrics_hostname}/CustomReportsEngine/rest/reportsplusengine/datasets/METRICS_DEFAULT/data?livefeed=true&offset=0&dateFormat=milliseconds&priority=normal&nullValue=&syscol=false&limit=-1&parameter.param2=3&parameter.param3=1&parameter.param1=-1&operation=METRICS_EXECUTE_SP&parameter.spName=RptAgentCapacityLicenseSurvey&parameter.param4=${commcell_unique_id}"
	if (${HTTP_STATUS_CODE} != 200) {
	print Server response was ${HTTP_STATUS_CODE} (expected 200)
	print The server response was:
	json format {cuID_usage} 
	print {cuID_usage}
	print Exiting
	terminate
  }

  loglevel DEBUGX
  foreach $JSON{cuID_usage}.[records] as this_cuID_record {
    csv write_field "ccid_usage" ${commcell_unique_id}
	csv write_field "ccid_usage" ${commcell_commcell_id}
    foreach $JSON(this_cuID_record).[] as this_value {
          csv write_field "ccid_usage" ${this_value.VALUE}
      }
  } 
  
  print done
  clear http_headers
}
csv close "ccid_usage"

#==================== Process Usage by License Report  ====================#