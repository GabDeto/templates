#################################################################
#
# Example Extractor to obtain line items from the Exivity API  
# This can be used for integration into external ERP systems
#
# ==============================================================
#                                                           
# This USE script will requires two parameters:
#
# - [fromDate] 
# - [toDate]
#
# Both in YYYYMMDD format 
#                                                           
#################################################################

#====================== Validation ======================#

# Check if we have two parameters (from and to date)
if (${ARGC} != 2)
{
	print "This requires 2 argument, the first day of the invoice period, and the last day of the invoice periode, both in yyyyMMdd format"
	terminate
} else {
	var from_date = ${ARG_1}
	var to_date = ${ARG_2}
}

# Validate the date formats
match date "^([0-9]{8})$" ${from_date}
if (${date.STATUS} != MATCH) {
	print Argument 1 error: ${from_date} is not in YYYYMMDD format
	terminate
}

match date "^([0-9]{8})$" ${to_date}
if (${date.STATUS} != MATCH) {
	print Argument 2 error: ${to_date} is not in YYYYMMDD format
	terminate
}

# Extract the day, month and year fields from the dates
match day "^[0-9]{6}([0-9]{2})" ${from_date}
if (${day.STATUS} != MATCH) {
	print Could not extract day from the supplied date (${from_date})
	terminate
} else {
	var day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${from_date}
if (${day.STATUS} != MATCH) {
	print Could not extract month from the supplied date (${from_date})
	terminate
} else {
	var month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${from_date}
if (${year.STATUS} != MATCH) {
	print Could not extract year from the supplied date (${from_date})
	terminate
} else {
	var year = ${year.RESULT}
}



#====================== Validation ======================#

# Hostname of the Exivity server
public var exivity_host = "hostname.exivity.local"

# Default port is 8002 for API (this is a different port as the web UI)
public var api_port = "8002"

# API user is sysadmin, with default password public
public var username = "admin"  # The username that has access to read the report
public var password = "exivity" # The password that goes with above user name

# use report settings
public var report_id = "1" # The id of the report definition 
public var depth = "2" # The account depth of the cost report

# loglevel 0
var JSON_dir = "system/extracted/exivity/json"
var CSV_dir = "system/extracted/exivity"

var authJSON = "${JSON_dir}/auth.json"
var reportsJSON = "${JSON_dir}/reports.json"
var servicesJSON = "${JSON_dir}/services.json"
var accountsJSON = "${JSON_dir}/accounts.json"

var export_file = "${CSV_dir}/${year}${month}_exivity_charges.csv"
var services_file = "${CSV_dir}/${year}${month}_exivity_services.csv"
var accounts_file = "${CSV_dir}/${year}${month}_exivity_accounts.csv"'
var invoice_date_file = "${CSV_dir}/${year}${month}_exivity_invoice_date.csv"
#
#=================  End Configuration ==================#

#/ Get an token from Exivity 
print "Getting Exivity Charges ..."

# Set up the HTTP request parameters
set http_header "Accept: application/json"
set http_header "Content-Type: application/x-www-form-urlencoded"
set http_body data "username=${username}&password=${password}"
set http_savefile "${authJSON}"
buffer token = http POST "https://${exivity_host}:${api_port}/v1/auth/token?app="
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {token} 
	print {token}
	terminate
}
print "Succesfully authenticated!"

# Create a variable called ${access_token} from the auth token in {token}
var access_token = "$JSON{token}.[token]"
print "access token is ${access_token}"
discard {token}

set http_savefile "${reportsJSON}"
# set http_savefile "${json_filedir}\http_consumption_init-1k.json"
clear http_headers
set http_header "Accept: application/json"
set http_header "Content-Type: application/x-www-form-urlencoded"
set http_header "Authorization: Bearer ${access_token}"
# Get the charges from Exivity
buffer reports = http GET "https://${exivity_host}:${api_port}/v1/reports"
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {reports} 
	print {reports}
	terminate
}
set http_savefile "${export_file}"
buffer charges = http GET "https://${exivity_host}:${api_port}/v1/reports/${report_id}/run?start=${year}${month}01&end=${year}${month}31&timeline=month&depth=${depth}&include=account_name,service_description,servicecategory_name&format=csv&precision=highest&consolidated=1&progress=0"
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {charges} 
	print {charges}
	terminate
}

set http_savefile "${servicesJSON}"
buffer services = http GET "https://${exivity_host}:${api_port}/v1/services"
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {services} 
	print {services}
	terminate
}

#
# Get the accounts
set http_savefile "${accounts_file}"
buffer accounts = http GET "https://${exivity_host}:${api_port}/v1/dump/data?models=account&progress=0"
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {accounts} 
	print {accounts}
	terminate
}

# Get the services
set http_savefile "${services_file}"
buffer services = http GET "https://${exivity_host}:${api_port}/v1/dump/data?models=service&progress=0"
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {services} 
	print {services}
	terminate
}

# Write the invoice period
csv "invoice_date" = "${invoice_date_file}"
csv add_headers "invoice_date" from_date to_date
csv fix_headers "invoice_date"
csv write_field "invoice_date" ${from_date} ${to_date}
csv close "invoice_date"