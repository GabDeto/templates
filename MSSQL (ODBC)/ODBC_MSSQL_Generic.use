#################################################################
# Example Extractor to obtain data from an ODBC database server #
#                                                               #
# This example shows how to query a generic MSSQL Database      #
#                                                               #
#################################################################
#
loglevel INFO
#====================== Validation ======================#
if (${ARGC} < 1)
{
    print This requires 1 argument, the day to collect usage for in yyyyMMdd format.
    terminate with error 
} else {
    var dataDate = ${ARG_1}
}
# Validate the date formats
match date "^([0-9]{8})$" ${dataDate}
if (${date.STATUS} != MATCH) {
    print Argument 1 error: ${dataDate} is not in yyyyMMdd format
    terminate
} else {
  match YearMonth "^([0-9]{6})[0-9]{2}" ${dataDate}
}
#====================== Validation ======================#

# SQL user
public var UserID = "<username>" 
# SQL password
public var Password = "<password>"
# Servername, with optionally the instance in case of a named instance
public var ServerName-Instance = "<server>\\<instance>"
# Name of the database
public var Database = "<database>"
# SQL option
public var TrustServerCertificate = "No"
# SQL option
public var Trusted_Connection = "No"
# SQL query
public var Query = "Select * from table;"
# output file format
public var SaveQuery = "system/extracted/ODBC/MSSQL/${dataDate}_mssql_odbc.csv"


# fire the query to the SQL Server
set odbc_connect "DRIVER=SQL Server;SERVER=${ServerName-Instance};Database=${Database};TrustServerCertificate=${TrustServerCertificate};Trusted_Connection=${Trusted_Connection};UID=${UserID};PWD=${Password};"
buffer sqlout = odbc_direct "${Query}"
# save the query
save {sqlout} as ${SaveQuery}
