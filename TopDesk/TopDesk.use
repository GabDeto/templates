#################################################################
# 
#  This USE script will download the TopDesk incidents:
#
# ==========================================================
#                                                               
# This needs one parameter, FROM date in: YYYYMMDD
#																
#################################################################

if (${ARGC} < 1) {
	print "This requires an argument, the day to collect usage for in yyyyMMdd format"
	terminate with error
} else {
	var today = ${ARG_1}
}
	
# Validate the date formats
match date "^([0-9]{8})$" ${today}
if (${date.STATUS} != MATCH) {
	print Argument 1 error: ${today} is not in today format
	terminate with error
}


#==================== Configuration ====================#
#

loglevel INFO

# username
public var username = user 
# password
public var password = SECRET
#Set PartnerRoot
public var partnerRoot = "https://servicedesk.domain.com"
# Standard location for writing extracted files, relative to %EXIVITY_HOME_PATH%
public var exportdir = "system/extracted/TopDesk"

# default path variables
var servicerequests_export_file = "${exportdir}/${today}_TopDesk_Service_Requests.csv"
var json_filedir = "${exportdir}/json"

#
#=================  End Configuration ==================#

#=================  Date Formatting  ==================#

# Extract the day, month and year fields from the dates
match day "^[0-9]{6}([0-9]{2})" ${today}
if (${day.STATUS} != MATCH) {
	print Could not extract day from the supplied date (${today})
	terminate with error
} else {
	var day = ${day.RESULT}
}

match month "^[0-9]{4}([0-9]{2})[0-9]{2}" ${today}
if (${day.STATUS} != MATCH) {
	print Could not extract month from the supplied date (${today})
	terminate with error
} else {
	var month = ${month.RESULT}
}

match year "^([0-9]{4})[0-9]{4}" ${today}
if (${year.STATUS} != MATCH) {
	print Could not extract year from the supplied date (${today})
	terminate with error
} else {
	var year = ${year.RESULT}
}

var RequestingDate = "${year}-${month}-${day}"

# Create Base64 Auth String
var authstring = "${username}:${password}"
encode base64 authstring

#Create header entry's for GET request
clear http_headers
set http_header "Accept: application/json"
set http_header "Authorization: Basic ${authstring}"
set http_savefile "${json_filedir}/results.json"

#Create the CSV
csv "servicerequests" = ${servicerequests_export_file}
csv add_headers "servicerequests" RequestId CallerBranchName CallerUserName SRBriefDescription SRTime SRType SRStatus SRCategory UPN HeadBranch
csv fix_headers "servicerequests"

#Set basic http settings
set http_timeout 60
set http_retry_count 10
set http_retry_delay 1000

#Collect data
buffer incidents = http GET "${partnerRoot}/tas/api/incidents?closed_date_end=${RequestingDate}"
if (${HTTP_STATUS_CODE} > 206) {
  print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
  print The server response was:
  json format {incidents} 
  print {incidents}
  terminate with error
}

# Iterate through the incidents and populate the file
foreach $JSON{incidents}.[] as this_incident {
	var BranchID = $JSON(this_incident).[CallerBranch].[id]
	set http_savefile "${json_filedir}/Branch_results.json"

	buffer Branch = http GET "${partnerRoot}/tas/api/branches/id/${BranchID}"
	var email = $JSON{Branch}.[email]
	var BranchType = $JSON{Branch}.[branchType]
	if ( ${BranchType} == "hasAHeadBranch" ) {
		var BranchName = $JSON{Branch}.[headBranch].[name]
	} else {
		var BranchName = "*"
	}

	var BriefDesc = $JSON(this_incident).[briefDescription]
	escape quotes in BriefDesc using \"

	# Define the fields to export to match the headers
    csv write_field servicerequests $JSON(this_incident).[number]
    csv write_field servicerequests $JSON(this_incident).[CallerBranch].[name]
    csv write_field servicerequests $JSON(this_incident).[caller].[dynamicName]
	csv write_field servicerequests ${BriefDesc}
    csv write_field servicerequests $JSON(this_incident).[timeSpent]
    csv write_field servicerequests $JSON(this_incident).[callType].[name]
    csv write_field servicerequests $JSON(this_incident).[processingStatus].[name]
	csv write_field servicerequests $JSON(this_incident).[category].[name]
	csv write_field servicerequests ${email}
	csv write_field servicerequests ${BranchName}
}

  #Close the CSV
  csv close "servicerequests"
