
#==================== Configuration ====================#
#
# Template USE Extractor for obtaining VM's from vCenter 6.5 and higher REST API
#

public loglevel WARN # adjust log detail to: DEBUG, INFO, WARN 
public var vcenter = "192.168.1.125"

public var JSON_dir = "c:\exivity\VC65\json" # directory should exist
public var CSV_dir = "c:\exivity\VC65" # directory should exist

public var vmsJSON = "${JSON_dir}\vcenter_vms.json"
public var vmJSON = "${JSON_dir}\vcenter_vm.json"

public var vm_details_export_file = "system\extracted\VC65\DATE_vcenter_vm_details.csv" # directory should exist
#
#=================  End Configuration ==================#

public var username = "YourUserName"
public var password = "YourPassword"


#/ Get an token from vCenter 
print "Getting VC 6.5 API Token"

# Set up the HTTP request parameters
# set http_header "Authorization: Basic YWRtaW5pc3RyYXRvckBlc3gubG9jYWxkb206VVUjJjl5JlYiK1dMTGc0IQ=="
set http_username ${username}
set http_password ${password}
set http_authtype basic
set http_savefile "c:\exivity\tim.json"
# Get VC Token and cache it in a buffer called {token}
buffer token = http POST "https://192.168.1.125/rest/com/vmware/cis/session"
if (${HTTP_STATUS_CODE} != 200) {
	print Got HTTP status ${HTTP_STATUS_CODE}, expected a status of 200
	print The server response was:
	json format {token} 
	print {token}
	terminate
}
# clear http_headers

# save the access token
var access_token = $JSON{token}.[value]
print ${access_token}
discard {token}

set http_header "vmware-api-session-id: ${access_token}"
set http_header "Content-Type: application/json"
set http_savefile ${vmsJSON}
print Getting All VM's JSON as ${vmsJSON}
buffer vms = http GET "https://192.168.1.125/rest/vcenter/vm"
if (${HTTP_STATUS_CODE} != 200) {
	print Server response was ${HTTP_STATUS_CODE} (expected 200)
	print The server response was:
	json format {vms} 
	print {vms}
	print Exiting
	terminate
}

print VM ID's obtained successfully.

csv "vm_details" = ${vm_details_export_file}
csv add_headers "vm_details" vmid memory.size_MiB cpu.count cpu.cores_per_socket power_state name boot.guest_OS disk.vmdk_file disk.type disk.label disk.capacity nic.network_name nic.type nic.network nic.mac_address nic.label nice.state nice.type
csv fix_headers "vm_details"

foreach $JSON{vms}.[value] as this_vm
{
	var vmid = $JSON(this_vm).[vm]
	print Obtaining VM details for ${vmid}
	set http_savefile ${vmJSON}
	buffer vm = http GET https://192.168.1.125/rest/vcenter/vm/${vmid}
	
	if (${HTTP_STATUS_CODE} != 200) {
		print Server response was ${HTTP_STATUS_CODE} (expected 200)
		print The server response was:
		json format {vm} 
		print {vm}
		print Exiting
		terminate
	}
	
	foreach $JSON{vm}.[value].[disks] as current_disk
	{
		foreach $JSON{vm}.[value].[nics] as current_nic
		{
			
			csv write_field vm_details ${vmid}
			csv write_field vm_details $JSON{vm}.[value].[memory].[size_MiB]
			csv write_field vm_details $JSON{vm}.[value].[cpu].[count]
			csv write_field vm_details $JSON{vm}.[value].[cpu].[cores_per_socket]
			csv write_field vm_details $JSON{vm}.[value].[power_state]
			csv write_field vm_details $JSON{vm}.[value].[name]
			csv write_field vm_details $JSON{vm}.[value].[guest_OS]
			csv write_field vm_details $JSON(current_disk).[value].[backing].[vmdk_file]
			csv write_field vm_details $JSON(current_disk).[value].[backing].[type]
			csv write_field vm_details $JSON(current_disk).[value].[label]
			csv write_field vm_details $JSON(current_disk).[value].[capacity]
			csv write_field vm_details $JSON(current_nic).[value].[backing].[network_name]
			csv write_field vm_details $JSON(current_nic).[value].[backing].[type]
			csv write_field vm_details $JSON(current_nic).[value].[backing].[network]
			csv write_field vm_details $JSON(current_nic).[value].[mac_address]
			csv write_field vm_details $JSON(current_nic).[value].[label]
			csv write_field vm_details $JSON(current_nic).[value].[state]
			csv write_field vm_details $JSON(current_nic).[value].[type]
		}
	}
}

print JSON retrieved  

clear http_headers