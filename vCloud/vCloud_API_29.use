
#==================== Configuration ====================#
#
# Template USE Extractor for obtaining VM's data from vCloud API 29.0 and higher
#

public loglevel WARN # adjust log detail to: DEBUG, INFO, WARN 

if (${ARGC} == 0 ) {    # today & now
  var Date = "${YEAR}${MONTH}${DAY}"
  var Hour = ${HOUR}
}
if (${ARGC} == 1 ) {    # that date & now
  var Date = ${ARG_1}
  var Hour = ${HOUR}
}
if (${ARGC} == 2 ) {    # today & now
  var Date = ${ARG_1}
  var Hour = ${ARG_2}
}
if (${Date} == ${Hour} ) {
  var Hour = ${HOUR}
}

# API used
public var API_Name = "MyAPI" # Put an API name here, for example: adminVM
var version = "30.0" # Check your vCloud API version with VMware

public var host = "https://myHost" # the hostname of your vCloud server where the API end points are served
public var username = "MyUserName" # username with read access to the API of vCloud
public var password = "MyPassword" # password, optionally use the "Encrypt" button

# standard output directories, will be created automatically
var exportdir = "system/extracted/vmWare"  
var usage_export_file = "${exportdir}/${API_Name}/${Date}.csv"

#================= Authorization section start =========#
var login = "${username}:${password}"
encode base64 login
# Set up the HTTPS request parameters
set http_header "Accept:application/*+xml;version=${version}" 
set http_header "Authorization:Basic ${login}"	
buffer token = http POST "${host}/api/sessions"
print "Authorization started."
http get_header "X-VMWARE-VCLOUD-ACCESS-TOKEN" as vcloud_auth
# Alternative:
#http get_header "x-vcloud-authorization" as vcloud_auth 
print "Authorization completed."
discard {token}
#================= Authorization section end ============#

# ===== CSV file structure start =====#
csv API_OUT = "${usage_export_file}"
csv add_headers API_OUT "Header 1" "Header 2" "Header 3"
csv fix_headers API_OUT
# ===== CSV file structure end =====#	

# ======= paging section start
var page_size = 25 # Max number of records per page
var page = 0 # Start page, do not change
var counter = 10000 # Max number of pages, set to null for unlimited
# ======= paging section end

# Main loop start	
loop paging "${counter}" {
  clear http_headers
	discard {token}
	var page += 1
	# Set up the HTTPS request parameters
	set http_header "Accept:application/*+xml;version=${version}"
	set http_header "Authorization:Bearer ${vcloud_auth}"	
	
  buffer token = http GET "${host}/api/query?type=${API_Name}&format=records&pageSize=${page_size}&page=${page}"
  
  if (${HTTP_STATUS_CODE} != 200) {
	  print Server response was ${HTTP_STATUS_CODE} (expected 200)
	  if ("${page}" > 1) {
	  print "Success: Exiting - last page reached."
	}
	else {
	  print "Error: No data received from server." 
	}
	clear http_headers
  discard {token}
  csv close "API_OUT"
	terminate
	}
	# ===== CSV variables section	start
  var var1 = "EXIVITY_NOT_FOUND"
  var var2 = "EXIVITY_NOT_FOUND"
  var var3 = "EXIVITY_NOT_FOUND"
  # ===== CSV variables section	end

  foreach $XML{token}.[QueryResultRecords] as this_record {
    var check = $XML(this_record).[@check_attribute] # check a parameter which is present in all valid records
    if ("${check.LENGTH}" > 0) {
    
	  if ("${check}" != "EXIVITY_NOT_FOUND") {
	  #set parameters you want to get
        var var1 = $XML(this_record).[@attribute1]
        var var2 = $XML(this_record).[@attribute2]
        var var3 = $XML(this_record).[@attribute3]
  
  # ===== Writing CSV record
        csv write_field "API_OUT" ${var1}
        csv write_field "API_OUT" ${var2}  
        csv write_field "API_OUT" ${var3} 
      }
    } 
  }
	
} # Main loop end
clear http_headers
discard {token}
csv close "API_OUT"
